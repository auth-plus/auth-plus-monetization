name: Continuous Integration on Pull Request
on:
  pull_request:
    branches: [staging, main]
  push:
    branches: [staging, main]

env:
  POETRY_VERSION: 1.4.1

jobs:
  Audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install poetry
        run: python3 -m pip install poetry==${{ env.POETRY_VERSION }}
      - name: Install Dependencies
        run: poetry config virtualenvs.create false && poetry install
      - name: Installing audit tool
        run: poetry self add poetry-audit-plugin
      - name: Executing
        run: poetry audit
  Test:
    runs-on: ubuntu-latest
    env:
      APP_NAME: auth-plus-monetization
      PORT: 5005
      PYTHON_ENV: test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install poetry
        run: python3 -m pip install poetry==${{ env.POETRY_VERSION }}
      - name: Install Dependencies
        run: poetry config virtualenvs.create false && poetry install
      - name: Generating Coverage
        run: coverage run -m pytest
      - name: Exporting lcov and xml
        run: coverage lcov && coverage xml
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Code Climate Scan
        uses: paambaati/codeclimate-action@v3.2.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CODECLIMATE_TOKEN }}
        with:
          coverageLocations: ${{github.workspace}}/coverage.lcov:lcov
      - name: Codacy Scan
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage.xml
  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install poetry
        run: python3 -m pip install poetry==${{ env.POETRY_VERSION }}
      - name: Install Dependencies
        run: poetry config virtualenvs.create false && poetry install
      - name: Running lint
        run: flake8 src/ -v
